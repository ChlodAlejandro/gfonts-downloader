#!/usr/bin/python
import requests
import re
import os, sys
import shutil
import datetime

print("Google Fonts Downloader")
print("v1.1 - Build 7/25/2020")
print("")

workingPath = "out"
terminate = False
urls = []

# default options
options = {
    "preserve": False,
    "format": "woff2"
}

headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0" if options["format"] == "woff2" else None
}

# check params
for argi in range(len(sys.argv)):
    if argi == 0:
        continue

    arg = sys.argv[argi]

    if arg == "--preserve":
        options["preserve"] = True
    elif arg.startswith("--format="):
        options["format"] = arg[8:]
    elif arg.startswith("--out="):
        workingPath = arg[5:]
    else:
        print(f"Unknown parameter: \"{arg}\".")
        exit(1)

permittedFormats = ["ttf", "woff2"]
# validate params
if not options["format"] in permittedFormats:
    print("Bad format: \"" + options["format"] + "\".")
    print(f"Allowed formats: {permittedFormats}")

print("Please enter the relative location of the font files")
print("downloaded to the CSS file.")
print("")
print("e.g. if you want the font files to be in \"fonts/\" relative")
print("to \"fonts.css\", type in \"fonts/\"")

relativeFontPath = input("Relative Location (fonts/) > ") or "fonts/"

if not relativeFontPath.endswith("/"):
    relativeFontPath += "/"

print("")
print("Please enter the URLs to download.")
print("Type only \".\" to finish.")
print("")
print("e.g. https://fonts.googleapis.com/css?family=Lato")

while not terminate:
    url = input("URL > ").strip()

    if url == ".":
        break

    urls.append(url)

if not os.path.isdir(workingPath):
    os.mkdir(workingPath)
elif not options["preserve"] and not workingPath == ".":
    print("Output folder found. Deleting anyway... (use --preserve to keep old files)")
    shutil.rmtree(workingPath)
    os.mkdir(workingPath)
else:
    print("Output folder found. Preserving... (fonts.css will still be overwritten!)")

fontPath = f"{workingPath}/{relativeFontPath}"
os.mkdir(fontPath)

generateTime = datetime.datetime.now()
finalCSS = f"/* Generated by Google Fonts Downloader */\n/* {generateTime} */\n\n"

for url in urls:
    if url.strip() == "":
        continue

    print(f"Searching for fonts in {url}...")
    cssr = requests.get(url, allow_redirects=True, headers=headers)

    re_rule = re.compile(r"\/\*\s?(.*?)\s?\*\/(?:\n|.)*?font-family:\s?'(.*?)'(?:\n|.)*?font-weight:\s?(\d*?);(?:\n|.)*?url\(([0-9A-Za-z:\/._\-]+)\)[^}]*}\n")
    freg = re_rule.findall(cssr.text)

    fontCSS = f"/* {url} */\n{cssr.text}"

    if freg:
        for furl in freg:
            if os.path.isfile(f"{fontPath}{furl[1]}@{furl[2]}-{furl[0]}.woff2") and not options["preserve"]:
                print(f"{furl[1]} {furl[0]} ({furl[1]}@{furl[2]}-{furl[0]}.woff2) already exists. Deleting anyway... (use --preserve to keep old files)")
            elif options["preserve"]:
                print(f"{furl[1]} {furl[0]} ({furl[1]}@{furl[2]}-{furl[0]}.woff2) already exists. Skipping download...")
                continue
            
            print(f"Downloading {furl[1]}@{furl[2]} ({furl[0]}) from \"{furl[3]}\"...")
            open(f"{fontPath}{furl[1]}@{furl[2]}-{furl[0]}.woff2", "wb").write(requests.get(furl[3], allow_redirects=True, headers=headers).content)

            fontCSS = fontCSS.replace(furl[3], f"\"{relativeFontPath}{furl[1]}@{furl[2]}-{furl[0]}.woff2\"")

    finalCSS += f"{fontCSS}\n\n"

open(f"{workingPath}/fonts.css", "w").write(finalCSS)